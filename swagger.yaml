openapi: 3.1.0
info:
  title: Warehouse Productivity API
  version: 1.0.0
  description: REST API for tracking warehouse productivity metrics

servers:
  - url: http://localhost:5050
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token

  schemas:
    BaseResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation completed successfully

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              example: false
            message:
              type: string
              example: Invalid request parameters
            errors:
              type: array
              items:
                type: string
              example: ["Username is required", "Password must be at least 8 characters"]

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
        fullName:
          type: string
          example: John Doe
        role:
          type: string
          example: "operator"

    Role:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: operator
        description:
          type: string
          example: Warehouse operator role

    DailyLog:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        logDate:
          type: string
          format: date
          example: "2024-02-20"
        isPresent:
          type: boolean
          example: true
        binningCount:
          type: integer
          example: 150
        pickingCount:
          type: integer
          example: 200
        totalItems:
          type: integer
          example: 350

    ProductivityMetrics:
      type: object
      properties:
        totalBinning:
          type: integer
          example: 1500
        totalPicking:
          type: integer
          example: 2000
        totalItems:
          type: integer
          example: 3500
        averageItemsPerDay:
          type: number
          format: float
          example: 175.5
        presentDays:
          type: integer
          example: 20
        totalDays:
          type: integer
          example: 22
        attendanceRate:
          type: number
          format: float
          example: 90.9

    UserProductivity:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        username:
          type: string
          example: johndoe
        fullName:
          type: string
          example: John Doe
        totalBinning:
          type: integer
          example: 750
        totalPicking:
          type: integer
          example: 1000
        totalItems:
          type: integer
          example: 1750
        averageItemsPerDay:
          type: number
          format: float
          example: 87.5
        presentDays:
          type: integer
          example: 20
        attendanceRate:
          type: number
          format: float
          example: 90.9

    DailyProductivity:
      type: object
      properties:
        date:
          type: string
          format: date
          example: "2024-02-20"
        username:
          type: string
          example: johndoe
        fullName:
          type: string
          example: John Doe
        isPresent:
          type: boolean
          example: true
        binningCount:
          type: integer
          example: 150
        pickingCount:
          type: integer
          example: 200
        totalItems:
          type: integer
          example: 350

paths:
  /health:
    get:
      summary: Health check endpoint
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          status:
                            type: string
                            example: ok
                          timestamp:
                            type: string
                            format: date-time

  /api/auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - fullName
                - roleId
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  example: password123
                fullName:
                  type: string
                  example: John Doe
                roleId:
                  type: integer
                  example: 1
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                usernameOrEmail:
                  type: string
                  description: Username or email of the user
                password:
                  type: string
                  description: Password of the user
              required:
                - usernameOrEmail
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                          username:
                            type: string
                          email:
                            type: string
                          fullName:
                            type: string
                          role:
                            type: string
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/refresh-token:
    post:
      summary: Refresh access token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          accessToken:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/logout:
    post:
      summary: Logout user
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/overview/today:
    get:
      summary: Get today's productivity overview
      tags: [Overview]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: Optional date to get overview for (defaults to today)
      responses:
        '200':
          description: Today's overview retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          itemsProcessed:
                            type: integer
                            example: 150
                          workersPresent:
                            type: integer
                            example: 6
                          totalWorkers:
                            type: integer
                            example: 8
                          target:
                            type: integer
                            example: 55
                          actual:
                            type: integer
                            example: 150
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/overview/trends:
    get:
      summary: Get productivity trends
      tags: [Overview]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Productivity trends retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          daily:
                            type: integer
                            description: Average items processed per day
                            example: 61
                          weekly:
                            type: integer
                            description: Average items processed per week
                            example: 427
                          monthly:
                            type: integer
                            description: Average items processed per month
                            example: 1830
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/overview/details:
    get:
      summary: Get detailed productivity data
      tags: [Overview]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Number of items per page
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Optional start date filter
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Optional end date filter
      responses:
        '200':
          description: Productivity details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          data:
                            type: array
                            items:
                              type: object
                              properties:
                                date:
                                  type: string
                                  format: date
                                  example: "2024-02-20"
                                binning:
                                  type: integer
                                  example: 66
                                picking:
                                  type: integer
                                  example: 29
                                totalWorkers:
                                  type: integer
                                  example: 8
                                workersPresent:
                                  type: integer
                                  example: 6
                          pagination:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 100
                              page:
                                type: integer
                                example: 1
                              limit:
                                type: integer
                                example: 10
                              totalPages:
                                type: integer
                                example: 10
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/overview/seven-day-trend:
    get:
      summary: Get seven-day productivity trend
      tags: [Overview]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Seven day trend retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            date:
                              type: string
                              format: date
                              example: "2024-02-14"
                            items:
                              type: integer
                              example: 85
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users:
    get:
      summary: List users
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/daily-logs:
    post:
      summary: Create or update a daily log
      tags: [Daily Logs]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - logDate
                - isPresent
              properties:
                logDate:
                  type: string
                  format: date
                  example: "2024-02-20"
                isPresent:
                  type: boolean
                  example: true
                binningCount:
                  type: integer
                  minimum: 0
                  example: 150
                pickingCount:
                  type: integer
                  minimum: 0
                  example: 200
      responses:
        '200':
          description: Daily log created/updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DailyLog'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Only operators can create daily logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Get all daily logs with pagination and filters
      tags: [Daily Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Start date for filtering (YYYY-MM-DD)
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: End date for filtering (YYYY-MM-DD)
        - in: query
          name: userId
          schema:
            type: integer
          description: Filter by user ID
      responses:
        '200':
          description: Daily logs retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          logs:
                            type: array
                            items:
                              $ref: '#/components/schemas/DailyLog'
                          total:
                            type: integer
                            example: 100
                          page:
                            type: integer
                            example: 1
                          limit:
                            type: integer
                            example: 10
                          totalPages:
                            type: integer
                            example: 10
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/daily-logs/{id}:
    get:
      summary: Get a specific daily log by ID
      tags: [Daily Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: Daily log ID
      responses:
        '200':
          description: Daily log retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DailyLog'
        '400':
          description: Invalid log ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Daily log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a daily log
      tags: [Daily Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: Daily log ID
      responses:
        '200':
          description: Daily log deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '400':
          description: Invalid log ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized to delete this log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Daily log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/daily-logs/user/{userId}:
    get:
      summary: Get daily logs for a specific user
      tags: [Daily Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            minimum: 1
          description: User ID
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Start date for filtering (YYYY-MM-DD)
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: End date for filtering (YYYY-MM-DD)
      responses:
        '200':
          description: User's daily logs retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          logs:
                            type: array
                            items:
                              $ref: '#/components/schemas/DailyLog'
                          total:
                            type: integer
                            example: 50
                          page:
                            type: integer
                            example: 1
                          limit:
                            type: integer
                            example: 10
                          totalPages:
                            type: integer
                            example: 5
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/daily-logs/stats:
    get:
      summary: Get daily log statistics
      tags: [Daily Logs]
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
            example: "2024-01-15"
          description: Start date for statistics (YYYY-MM-DD)
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
            example: "2024-02-20"
          description: End date for statistics (YYYY-MM-DD)
        - name: userId
          in: query
          required: true
          schema:
            type: integer
            example: 5
          description: ID of the user to get statistics for
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          totalBinning:
                            type: number
                            example: 325
                          totalPicking:
                            type: number
                            example: 400
                          totalItems:
                            type: number
                            example: 725
                          averageItemsPerDay:
                            type: number
                            example: 362.5
                          presentDays:
                            type: number
                            example: 2
                          totalDays:
                            type: number
                            example: 37
                          attendanceRate:
                            type: number
                            example: 5.41
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/activity-logs:
    get:
      summary: Get activity logs (admin only)
      tags: [Activity Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Start date for filtering
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: End date for filtering
        - in: query
          name: dataType
          schema:
            type: string
            enum: [binning, picking, attendance, daily_log]
          description: Filter by data type
        - in: query
          name: status
          schema:
            type: string
            enum: [success, failure]
          description: Filter by status
        - in: query
          name: userId
          schema:
            type: integer
          description: Filter by user ID
      responses:
        '200':
          description: List of activity logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Activity logs retrieved successfully
                  data:
                    type: object
                    properties:
                      logs:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            userId:
                              type: integer
                              example: 1
                            dataType:
                              type: string
                              example: daily_log
                            status:
                              type: string
                              example: success
                            activityTime:
                              type: string
                              format: date-time
                              example: "2024-02-20T10:00:00Z"
                            changeHistory:
                              type: object
                              example: {"details": "Updated daily log for 2024-02-20"}
                            user:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                username:
                                  type: string
                                  example: johndoe
                                fullName:
                                  type: string
                                  example: John Doe
                      total:
                        type: integer
                        example: 100
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      totalPages:
                        type: integer
                        example: 10
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Only admins can access activity logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/performance-metrics:
    get:
      summary: Get performance metrics
      tags: [Performance Metrics]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: startDate
          required: true
          schema:
            type: string
            format: date
          description: Start date for metrics
        - in: query
          name: endDate
          required: true
          schema:
            type: string
            format: date
          description: End date for metrics
        - in: query
          name: userId
          schema:
            type: integer
          description: Filter by user ID
        - in: query
          name: groupBy
          schema:
            type: string
            enum: [day, week, month]
            default: day
          description: Group metrics by time period
      responses:
        '200':
          description: Performance metrics
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    period:
                      type: string
                      format: date-time
                      example: "2024-02-20T00:00:00Z"
                    totalItems:
                      type: integer
                      example: 1500
                    averageItemsPerOperator:
                      type: number
                      format: float
                      example: 150.5
                    binningPercentage:
                      type: number
                      format: float
                      example: 60.5
                    pickingPercentage:
                      type: number
                      format: float
                      example: 39.5
                    attendanceRate:
                      type: number
                      format: float
                      example: 90.9
                    activeOperators:
                      type: integer
                      example: 10
        '400':
          description: Bad request - startDate and endDate are required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/performance-metrics/operator/{userId}:
    get:
      summary: Get operator performance metrics
      tags: [Performance Metrics]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: User ID
        - in: query
          name: startDate
          required: true
          schema:
            type: string
            format: date
          description: Start date for metrics
        - in: query
          name: endDate
          required: true
          schema:
            type: string
            format: date
          description: End date for metrics
      responses:
        '200':
          description: Operator performance metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalItems:
                    type: integer
                    example: 1500
                  averageItemsPerDay:
                    type: number
                    format: float
                    example: 150.5
                  binningPercentage:
                    type: number
                    format: float
                    example: 60.5
                  pickingPercentage:
                    type: number
                    format: float
                    example: 39.5
                  attendanceRate:
                    type: number
                    format: float
                    example: 90.9
                  targetAchievement:
                    type: number
                    format: float
                    example: 95.5
                  dailyBreakdown:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          format: date
                          example: "2024-02-20"
                        totalItems:
                          type: integer
                          example: 150
                        binningCount:
                          type: integer
                          example: 90
                        pickingCount:
                          type: integer
                          example: 60
                        isPresent:
                          type: boolean
                          example: true
        '400':
          description: Bad request - startDate and endDate are required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No performance data found for this operator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/performance-metrics/team:
    get:
      summary: Get team performance metrics
      tags: [Performance Metrics]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: startDate
          required: true
          schema:
            type: string
            format: date
          description: Start date for metrics
        - in: query
          name: endDate
          required: true
          schema:
            type: string
            format: date
          description: End date for metrics
        - in: query
          name: groupBy
          schema:
            type: string
            enum: [day, week, month]
            default: day
          description: Group metrics by time period
      responses:
        '200':
          description: Team performance metrics
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    period:
                      type: string
                      format: date-time
                      example: "2024-02-20T00:00:00Z"
                    totalItems:
                      type: integer
                      example: 1500
                    averageItemsPerOperator:
                      type: number
                      format: float
                      example: 150.5
                    binningPercentage:
                      type: number
                      format: float
                      example: 60.5
                    pickingPercentage:
                      type: number
                      format: float
                      example: 39.5
                    attendanceRate:
                      type: number
                      format: float
                      example: 90.9
                    activeOperators:
                      type: integer
                      example: 10
                    targetAchievement:
                      type: number
                      format: float
                      example: 95.5
                    operatorPerformance:
                      type: array
                      items:
                        type: object
                        properties:
                          userId:
                            type: integer
                            example: 1
                          username:
                            type: string
                            example: johndoe
                          fullName:
                            type: string
                            example: John Doe
                          totalItems:
                            type: integer
                            example: 150
                          averageItemsPerDay:
                            type: number
                            format: float
                            example: 15.5
                          attendanceRate:
                            type: number
                            format: float
                            example: 90.9
        '400':
          description: Bad request - startDate and endDate are required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/reports:
    post:
      summary: Request a performance report
      tags: [Performance Metrics]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - startDate
                - endDate
                - reportType
                - exportFormat
              properties:
                startDate:
                  type: string
                  format: date
                  example: "2024-02-01"
                endDate:
                  type: string
                  format: date
                  example: "2024-02-20"
                reportType:
                  type: string
                  enum: [daily, weekly, monthly]
                  example: weekly
                exportFormat:
                  type: string
                  enum: [excel, pdf]
                  example: excel
                emailTo:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '201':
          description: Report request created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  userId:
                    type: integer
                    example: 1
                  startDate:
                    type: string
                    format: date
                    example: "2024-02-01"
                  endDate:
                    type: string
                    format: date
                    example: "2024-02-20"
                  reportType:
                    type: string
                    example: weekly
                  exportFormat:
                    type: string
                    example: excel
                  emailTo:
                    type: string
                    format: email
                    example: user@example.com
                  status:
                    type: string
                    example: pending
                  createdAt:
                    type: string
                    format: date-time
                    example: "2024-02-20T10:00:00Z"
        '400':
          description: Bad request - Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/reports/{reportId}:
    get:
      summary: Get report request status
      tags: [Performance Metrics]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: reportId
          required: true
          schema:
            type: integer
          description: Report request ID
      responses:
        '200':
          description: Report request status
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  userId:
                    type: integer
                    example: 1
                  startDate:
                    type: string
                    format: date
                    example: "2024-02-01"
                  endDate:
                    type: string
                    format: date
                    example: "2024-02-20"
                  reportType:
                    type: string
                    example: weekly
                  exportFormat:
                    type: string
                    example: excel
                  emailTo:
                    type: string
                    format: email
                    example: user@example.com
                  status:
                    type: string
                    example: completed
                  createdAt:
                    type: string
                    format: date-time
                    example: "2024-02-20T10:00:00Z"
                  completedAt:
                    type: string
                    format: date-time
                    example: "2024-02-20T10:05:00Z"
                  downloadUrl:
                    type: string
                    example: "https://example.com/reports/report-1.pdf"
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      username:
                        type: string
                        example: johndoe
                      email:
                        type: string
                        format: email
                        example: user@example.com
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Report request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

security:
  - bearerAuth: [] 